{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Controls/Controls.module.css","components/Notification/Notification.module.css","components/Controls/Controls.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Controls","statNames","onBtnFeedback","className","s","title","buttonList","map","name","button","onClick","Statistics","good","neutral","bad","total","percentage","statInfo","defaultProps","Notification","message","text","App","state","addFeedback","key","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Object","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,MAAQ,0BAA0B,SAAW,+B,gBCA/DD,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,WAAa,6BAA6B,OAAS,2B,qBCArGD,EAAOC,QAAU,CAAC,KAAO,6B,+LCgBVC,EAdE,SAAC,GAAD,IAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,cAAb,OACb,sBAAKC,UAAU,YAAf,UACI,oBAAIA,UAAYC,IAAEC,MAAlB,mCACA,qBAAKF,UAAWC,IAAEE,WAAlB,SACKL,EAAUM,KAAI,SAACC,GAAD,OACX,wBAAQL,UAAWC,IAAEK,OAAmBC,QAAS,kBAAIR,EAAcM,IAAnE,SAA2EA,GAAzCA,Y,gBCL5CG,EAAa,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,WAA7B,OACd,sBAAKb,UAAU,YAAf,UACG,oBAAIA,UAAWC,IAAEC,MAAjB,yBACI,oBAAGF,UAAYC,IAAEa,SAAjB,mBAAkCL,KAClC,oBAAGT,UAAYC,IAAEa,SAAjB,sBAAqCJ,KACrC,oBAAGV,UAAWC,IAAEa,SAAhB,kBAAgCH,KAChC,oBAAGX,UAAWC,IAAEa,SAAhB,oBAAkCF,KAClC,oBAAGZ,UAAWC,IAAEa,SAAhB,gCAA8CD,EAA9C,WAIZL,EAAWO,aAAe,CACtBF,WAAY,GAGDL,Q,gBCRAQ,EAPM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACd,qBAAKjB,UAAU,YAAf,SACO,mBAAGA,UAAWC,IAAEiB,KAAhB,SAAuBD,OCgDtBE,E,4MA7CbC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,YAAc,SAACC,GACb,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAME,EAAUF,GAAO,O,EAI5BG,mBAAqB,WAEnB,OADc,EAAKL,MAAMX,KAAO,EAAKW,MAAMV,QAAU,EAAKU,MAAMT,K,EAIlEe,gCAAkC,WAChC,GAAI,EAAKN,MAAMX,KAAO,EACpB,OAAOkB,KAAKC,MAAM,EAAKR,MAAMX,KAAO,EAAKgB,qBAAuB,M,4CAIpE,WACE,MAA+BI,KAAKT,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CACEF,UAAWgC,OAAOC,KAAKF,KAAKT,OAC5BrB,cAAe8B,KAAKR,cAErBQ,KAAKJ,qBAAuB,EAC1B,cAAC,EAAD,CACChB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOiB,KAAKJ,qBACZZ,WAAYgB,KAAKH,oCAEnB,cAAC,EAAD,CAAcT,QAAQ,6B,GAzCde,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8a91612e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Statistics_title__2jHx-\",\"statInfo\":\"Statistics_statInfo__1SjH9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Controls_title__9FCw0\",\"buttonList\":\"Controls_buttonList__1o_Oi\",\"button\":\"Controls_button__ickqM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"Notification_text__2jNfw\"};","import React from 'react';\r\nimport s from './Controls.module.css';\r\n\r\nconst Controls = ({statNames, onBtnFeedback}) => (\r\n    <div className=\"container\">\r\n        <h1 className={ s.title}>Please leave feedback</h1>\r\n        <div className={s.buttonList}>\r\n            {statNames.map((name) => (\r\n                <button className={s.button} key={name} onClick={()=>onBtnFeedback(name)}>{name}</button>\r\n            ))}\r\n            </div>\r\n    </div>\r\n);\r\nControls.propTypes = {\r\n    statNames: PropTypes.arrayOf(PropTypes.string),\r\n    onBtnFeedback: PropTypes.func\r\n};\r\nexport default Controls;","import React from 'react';\r\nimport s from './Statistics.module.css';\r\n\r\nconst Statistics = ({good, neutral, bad, total, percentage}) => (\r\n     <div className=\"container\">\r\n        <h2 className={s.title}>Statisctics</h2>\r\n            <p className={ s.statInfo}>Good: {good}</p>\r\n            <p className={ s.statInfo}>Neutral: {neutral}</p>\r\n            <p className={s.statInfo}>Bad: {bad}</p>\r\n            <p className={s.statInfo}>Total: {total}</p>\r\n            <p className={s.statInfo}>Positive Feedback: {percentage}%</p>\r\n    </div>\r\n);\r\n\r\nStatistics.defaultProps = {\r\n    percentage: 0,\r\n}\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport s from './Notification.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n       <div className=\"container\">\r\n              <p className={s.text}>{message}</p>\r\n       </div>\r\n);\r\n\r\n\r\nexport default Notification;","import './App.css';\nimport React, { Component } from 'react';\nimport Controls from './components/Controls';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n  \n  addFeedback = (key) => {\n    this.setState(prevState => ({\n      [key]: prevState[key] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    if (this.state.good > 0) {\n      return Math.round(this.state.good / this.countTotalFeedback() * 100);\n    }\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <div className=\"App\">\n        <Controls\n          statNames={Object.keys(this.state)}\n          onBtnFeedback={this.addFeedback}\n        />\n        {this.countTotalFeedback() > 0 ?\n          (<Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            percentage={this.countPositiveFeedbackPercentage()}\n          />) :\n          <Notification message=\"No feedback given\" />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}